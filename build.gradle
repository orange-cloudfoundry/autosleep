buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:$gradleCoverallsVersion")
    }
    repositories {
        mavenLocal()
        jcenter()
    }
}

plugins {
    id "io.spring.dependency-management" version "0.5.6.RELEASE"
    id "com.github.hierynomus.license" version "0.12.1"
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        //needed for cf-java-client M release
        maven { url 'http://repo.spring.io/libs-snapshot' }
    }
}

subprojects {

    if (name == 'spring-apps' || name == 'acceptance') {
        //prevent parent folder from building an empty jar
        return
    }

    apply plugin: 'java'
    apply from: "$rootProject.projectDir/test.gradle"


    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    /* allow us not to specify most versions of the dependencies, since they will be retrieved according
    to springBoot version. Normally we would only have to apply spring-boot plugin to achieve the same result,
    but here we have a subproject that would not support it (common) but requires the dependencies nonetheless
    */
    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }

    dependencies {
        // Lombok
        compileOnly "org.projectlombok:lombok:$lombokVersion"

        //CF java client library and dependencies
        compile("org.cloudfoundry:cloudfoundry-client-reactor:$cfClientLibVersion")
        compile("io.projectreactor:reactor-core:$reactorCoreVersion")

        //Logs
        compile "org.slf4j:slf4j-api"
        compile "org.slf4j:jcl-over-slf4j"
        // Spring Data
        compile "org.springframework.data:spring-data-jpa"
        compile "org.springframework.cloud:spring-cloud-spring-service-connector"
        // Persistence
        runtime "mysql:mysql-connector-java"
        runtime "org.postgresql:postgresql"
        runtime "com.h2database:h2"
        compile "commons-dbcp:commons-dbcp"
        compile "org.hibernate:hibernate-entitymanager"
        compile "org.liquibase:liquibase-core:${liquibaseCoreVersion}"

        //org.springframework.boot.autoconfigure needed in common for now... TODO move to spring-apps
        compile "org.springframework.boot:spring-boot-starter-actuator"
    }


    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-parameters"
    }

    tasks.withType(Jar) { // includes War and Jar
        manifest {
            attributes( "Implementation-Title": baseName,
                    "Implementation-Version": version)
        }
    }

    sourceSets.main.compileClasspath += configurations.compileOnly
    sourceSets.test.compileClasspath += configurations.compileOnly
    sourceSets.test.runtimeClasspath += configurations.compileOnly

}

apply from: "$rootProject.projectDir/coverage.gradle"

license {
    header rootProject.file('config/HEADER')
    strictCheck true
    excludes(["**/*.css", "**/boost*", "**/bootbox*", "**/jquery*", "**/banner.txt", "**/*png",
              "**/*eot", "**/*ttf", "**/*woff*", "**/*gif", "**/*jpg", "**/*tpl", "**/*svg", "**/*map",
              "**/*xml", "**/*yaml"])
    mapping {
        java = 'PHP'
    }
}

//no more wrapper task, use gradle wrapper --gradle-version 2.12 to generate wrappre